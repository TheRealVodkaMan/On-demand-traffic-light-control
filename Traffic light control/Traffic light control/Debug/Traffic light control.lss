
Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d62  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000832  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f0  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d8  00000000  00000000  000029f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  74:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <yellowBoth_blink>:
#include "app.h"

uint8_t machineState = NORMAL_MODE;

void yellowBoth_blink()
{
  7c:	cf 93       	push	r28
	for(uint8_t i = 0; i < 20; i++)
  7e:	c0 e0       	ldi	r28, 0x00	; 0
  80:	0d c0       	rjmp	.+26     	; 0x9c <yellowBoth_blink+0x20>
	{
		LED_toggle(A, 1);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_toggle>
		LED_toggle(B, 1);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_toggle>
		msWait0(250);
  92:	8a ef       	ldi	r24, 0xFA	; 250
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 45 02 	call	0x48a	; 0x48a <msWait0>

uint8_t machineState = NORMAL_MODE;

void yellowBoth_blink()
{
	for(uint8_t i = 0; i < 20; i++)
  9a:	cf 5f       	subi	r28, 0xFF	; 255
  9c:	c4 31       	cpi	r28, 0x14	; 20
  9e:	88 f3       	brcs	.-30     	; 0x82 <yellowBoth_blink+0x6>
	{
		LED_toggle(A, 1);
		LED_toggle(B, 1);
		msWait0(250);
	}
}
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <app_startup>:

void app_startup()
{
	LED_init(C, 7);
  a4:	67 e0       	ldi	r22, 0x07	; 7
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	
	LED_init(A, 0);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	LED_init(A, 1);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	LED_init(A, 2);
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	
	LED_init(B, 0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	LED_init(B, 1);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	LED_init(B, 2);
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 c6 00 	call	0x18c	; 0x18c <LED_init>
	
	sei();
  dc:	78 94       	sei
	
	MCUCR set_High BIT(0);
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	85 bf       	out	0x35, r24	; 53
	MCUCR set_High BIT(1);
  e4:	85 b7       	in	r24, 0x35	; 53
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	85 bf       	out	0x35, r24	; 53
	
	GICR set_High BIT(6);
  ea:	8b b7       	in	r24, 0x3b	; 59
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	8b bf       	out	0x3b, r24	; 59
  f0:	08 95       	ret

000000f2 <app_loop>:

void app_loop()
{
	while (1)
	{
		LED_on(C, 7);
  f2:	67 e0       	ldi	r22, 0x07	; 7
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
		
		LED_on(A, 0);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
		LED_on(B, 2);
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
		
		waitfor0(5);
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 30 02 	call	0x460	; 0x460 <waitfor0>
		LED_off(A, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_off>
		LED_off(B, 2);
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_off>
		
		yellowBoth_blink();
 122:	0e 94 3e 00 	call	0x7c	; 0x7c <yellowBoth_blink>
		
		LED_on(A, 2);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
		LED_on(B, 0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
		waitfor0(5);
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 30 02 	call	0x460	; 0x460 <waitfor0>
		
		switch (machineState)
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	88 23       	and	r24, r24
 144:	19 f0       	breq	.+6      	; 0x14c <app_loop+0x5a>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	81 f0       	breq	.+32     	; 0x16a <app_loop+0x78>
 14a:	d3 cf       	rjmp	.-90     	; 0xf2 <app_loop>
		{
			case NORMAL_MODE:
			LED_off(C, 7);
 14c:	67 e0       	ldi	r22, 0x07	; 7
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_off>
			
			LED_off(A, 2);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_off>
			LED_off(B, 0);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_off>
			
			yellowBoth_blink();
 164:	0e 94 3e 00 	call	0x7c	; 0x7c <yellowBoth_blink>
			break;
 168:	c4 cf       	rjmp	.-120    	; 0xf2 <app_loop>
			
			case PEDESTRIAN_MODE:
			waitfor0(5);
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 30 02 	call	0x460	; 0x460 <waitfor0>
			LED_off(A, 2);
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_off>
			LED_off(B, 0);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 ce 00 	call	0x19c	; 0x19c <LED_off>
			
			yellowBoth_blink();
 182:	0e 94 3e 00 	call	0x7c	; 0x7c <yellowBoth_blink>
			
			machineState = NORMAL_MODE;
 186:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 18a:	b3 cf       	rjmp	.-154    	; 0xf2 <app_loop>

0000018c <LED_init>:
 */ 
#include "led.h"

void LED_init(uint8_t port, uint8_t pin)
{
	DIO_init(port, pin, WRITEMODE);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_init>
 192:	08 95       	ret

00000194 <LED_on>:
}

void LED_on(uint8_t port, uint8_t pin)
{
	DIO_write(port, pin, High);
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_write>
 19a:	08 95       	ret

0000019c <LED_off>:
}

void LED_off(uint8_t port, uint8_t pin)
{
	DIO_write(port, pin, Low);
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_write>
 1a2:	08 95       	ret

000001a4 <LED_toggle>:
}

void LED_toggle(uint8_t port, uint8_t pin)
{
	DIO_toggle(port, pin);
 1a4:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_toggle>
 1a8:	08 95       	ret

000001aa <main>:

#include "Application/app.h"

int main(void)
{
	app_startup();
 1aa:	0e 94 52 00 	call	0xa4	; 0xa4 <app_startup>
	
	app_loop();
 1ae:	0e 94 79 00 	call	0xf2	; 0xf2 <app_loop>
}
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret

000001b8 <__vector_1>:

ISR(EXT_INT_0)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
	if(checkPINA(2) == 1)
 1c4:	ca 9b       	sbis	0x19, 2	; 25
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <__vector_1+0x1e>
	{
		if(machineState == NORMAL_MODE)
 1c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1cc:	81 11       	cpse	r24, r1
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <__vector_1+0x1e>
		{
			machineState = PEDESTRIAN_MODE;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <DIO_init>:
		case C:
			*value = (PINC&BIT(pin))>>pin;
			break;
			
		case D:
			*value = (PIND&BIT(pin))>>pin;
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	19 f1       	breq	.+70     	; 0x22c <DIO_init+0x4a>
 1e6:	30 f0       	brcs	.+12     	; 0x1f4 <DIO_init+0x12>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	e1 f1       	breq	.+120    	; 0x264 <DIO_init+0x82>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <DIO_init+0x10>
 1f0:	54 c0       	rjmp	.+168    	; 0x29a <DIO_init+0xb8>
 1f2:	08 95       	ret
 1f4:	41 11       	cpse	r20, r1
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <DIO_init+0x2e>
 1f8:	2a b3       	in	r18, 0x1a	; 26
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_init+0x22>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_init+0x1e>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	8a bb       	out	0x1a, r24	; 26
 20e:	08 95       	ret
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	09 f0       	breq	.+2      	; 0x216 <DIO_init+0x34>
 214:	5c c0       	rjmp	.+184    	; 0x2ce <DIO_init+0xec>
 216:	2a b3       	in	r18, 0x1a	; 26
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_init+0x40>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_init+0x3c>
 226:	82 2b       	or	r24, r18
 228:	8a bb       	out	0x1a, r24	; 26
 22a:	08 95       	ret
 22c:	41 11       	cpse	r20, r1
 22e:	0c c0       	rjmp	.+24     	; 0x248 <DIO_init+0x66>
 230:	27 b3       	in	r18, 0x17	; 23
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_init+0x5a>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_init+0x56>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	87 bb       	out	0x17, r24	; 23
 246:	08 95       	ret
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	09 f0       	breq	.+2      	; 0x24e <DIO_init+0x6c>
 24c:	40 c0       	rjmp	.+128    	; 0x2ce <DIO_init+0xec>
 24e:	27 b3       	in	r18, 0x17	; 23
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_init+0x78>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_init+0x74>
 25e:	82 2b       	or	r24, r18
 260:	87 bb       	out	0x17, r24	; 23
 262:	08 95       	ret
 264:	41 11       	cpse	r20, r1
 266:	0c c0       	rjmp	.+24     	; 0x280 <DIO_init+0x9e>
 268:	24 b3       	in	r18, 0x14	; 20
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_init+0x92>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_init+0x8e>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	84 bb       	out	0x14, r24	; 20
 27e:	08 95       	ret
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	29 f5       	brne	.+74     	; 0x2ce <DIO_init+0xec>
 284:	24 b3       	in	r18, 0x14	; 20
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_init+0xae>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_init+0xaa>
 294:	82 2b       	or	r24, r18
 296:	84 bb       	out	0x14, r24	; 20
 298:	08 95       	ret
 29a:	41 11       	cpse	r20, r1
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <DIO_init+0xd4>
 29e:	21 b3       	in	r18, 0x11	; 17
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_init+0xc8>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_init+0xc4>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	81 bb       	out	0x11, r24	; 17
 2b4:	08 95       	ret
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	51 f4       	brne	.+20     	; 0x2ce <DIO_init+0xec>
 2ba:	21 b3       	in	r18, 0x11	; 17
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_init+0xe4>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_init+0xe0>
 2ca:	82 2b       	or	r24, r18
 2cc:	81 bb       	out	0x11, r24	; 17
 2ce:	08 95       	ret

000002d0 <DIO_write>:
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	19 f1       	breq	.+70     	; 0x31a <DIO_write+0x4a>
 2d4:	30 f0       	brcs	.+12     	; 0x2e2 <DIO_write+0x12>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	e1 f1       	breq	.+120    	; 0x352 <DIO_write+0x82>
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <DIO_write+0x10>
 2de:	54 c0       	rjmp	.+168    	; 0x388 <DIO_write+0xb8>
 2e0:	08 95       	ret
 2e2:	41 11       	cpse	r20, r1
 2e4:	0c c0       	rjmp	.+24     	; 0x2fe <DIO_write+0x2e>
 2e6:	2b b3       	in	r18, 0x1b	; 27
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_write+0x22>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_write+0x1e>
 2f6:	80 95       	com	r24
 2f8:	82 23       	and	r24, r18
 2fa:	8b bb       	out	0x1b, r24	; 27
 2fc:	08 95       	ret
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	09 f0       	breq	.+2      	; 0x304 <DIO_write+0x34>
 302:	5c c0       	rjmp	.+184    	; 0x3bc <DIO_write+0xec>
 304:	2b b3       	in	r18, 0x1b	; 27
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_write+0x40>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_write+0x3c>
 314:	82 2b       	or	r24, r18
 316:	8b bb       	out	0x1b, r24	; 27
 318:	08 95       	ret
 31a:	41 11       	cpse	r20, r1
 31c:	0c c0       	rjmp	.+24     	; 0x336 <DIO_write+0x66>
 31e:	28 b3       	in	r18, 0x18	; 24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_write+0x5a>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_write+0x56>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	88 bb       	out	0x18, r24	; 24
 334:	08 95       	ret
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	09 f0       	breq	.+2      	; 0x33c <DIO_write+0x6c>
 33a:	40 c0       	rjmp	.+128    	; 0x3bc <DIO_write+0xec>
 33c:	28 b3       	in	r18, 0x18	; 24
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_write+0x78>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_write+0x74>
 34c:	82 2b       	or	r24, r18
 34e:	88 bb       	out	0x18, r24	; 24
 350:	08 95       	ret
 352:	41 11       	cpse	r20, r1
 354:	0c c0       	rjmp	.+24     	; 0x36e <DIO_write+0x9e>
 356:	25 b3       	in	r18, 0x15	; 21
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_write+0x92>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_write+0x8e>
 366:	80 95       	com	r24
 368:	82 23       	and	r24, r18
 36a:	85 bb       	out	0x15, r24	; 21
 36c:	08 95       	ret
 36e:	41 30       	cpi	r20, 0x01	; 1
 370:	29 f5       	brne	.+74     	; 0x3bc <DIO_write+0xec>
 372:	25 b3       	in	r18, 0x15	; 21
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_write+0xae>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_write+0xaa>
 382:	82 2b       	or	r24, r18
 384:	85 bb       	out	0x15, r24	; 21
 386:	08 95       	ret
 388:	41 11       	cpse	r20, r1
 38a:	0c c0       	rjmp	.+24     	; 0x3a4 <DIO_write+0xd4>
 38c:	22 b3       	in	r18, 0x12	; 18
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_write+0xc8>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_write+0xc4>
 39c:	80 95       	com	r24
 39e:	82 23       	and	r24, r18
 3a0:	82 bb       	out	0x12, r24	; 18
 3a2:	08 95       	ret
 3a4:	41 30       	cpi	r20, 0x01	; 1
 3a6:	51 f4       	brne	.+20     	; 0x3bc <DIO_write+0xec>
 3a8:	22 b3       	in	r18, 0x12	; 18
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_write+0xe4>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_write+0xe0>
 3b8:	82 2b       	or	r24, r18
 3ba:	82 bb       	out	0x12, r24	; 18
 3bc:	08 95       	ret

000003be <DIO_toggle>:
	}
}

void DIO_toggle(uint8_t port, uint8_t pin)
{
	switch(port)
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	89 f0       	breq	.+34     	; 0x3e4 <DIO_toggle+0x26>
 3c2:	28 f0       	brcs	.+10     	; 0x3ce <DIO_toggle+0x10>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <DIO_toggle+0x3c>
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	11 f1       	breq	.+68     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3cc:	08 95       	ret
	{
		case A:
			PORTA Toggle BIT(pin);
 3ce:	2b b3       	in	r18, 0x1b	; 27
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_toggle+0x1c>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_toggle+0x18>
 3de:	82 27       	eor	r24, r18
 3e0:	8b bb       	out	0x1b, r24	; 27
			break;
 3e2:	08 95       	ret
			
		case B:
			PORTB Toggle BIT(pin);
 3e4:	28 b3       	in	r18, 0x18	; 24
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_toggle+0x32>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_toggle+0x2e>
 3f4:	82 27       	eor	r24, r18
 3f6:	88 bb       	out	0x18, r24	; 24
			break;
 3f8:	08 95       	ret
			
		case C:
			PORTC Toggle BIT(pin);
 3fa:	25 b3       	in	r18, 0x15	; 21
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	82 27       	eor	r24, r18
 40c:	85 bb       	out	0x15, r24	; 21
			break;
 40e:	08 95       	ret
			
		case D:
			PORTD Toggle BIT(pin);
 410:	22 b3       	in	r18, 0x12	; 18
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 27       	eor	r24, r18
 422:	82 bb       	out	0x12, r24	; 18
 424:	08 95       	ret

00000426 <timer0_init>:

#include "timer.h"

void timer0_init()
{
	TCCR0 = 0x00;
 426:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 428:	12 be       	out	0x32, r1	; 50
 42a:	08 95       	ret

0000042c <timer0Delay>:
}

void timer0Delay(unsigned int overflow)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	ec 01       	movw	r28, r24
	unsigned int counter = 0;
	
	timer0_init();
 432:	0e 94 13 02 	call	0x426	; 0x426 <timer0_init>
	
	TCCR0 set_High BIT(0);
 436:	83 b7       	in	r24, 0x33	; 51
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
}

void timer0Delay(unsigned int overflow)
{
	unsigned int counter = 0;
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
	
	timer0_init();
	
	TCCR0 set_High BIT(0);
	
	while(counter < overflow)
 440:	08 c0       	rjmp	.+16     	; 0x452 <timer0Delay+0x26>
	{
		while((TIFR&TOV0) == 0);
 442:	08 b6       	in	r0, 0x38	; 56
 444:	00 fe       	sbrs	r0, 0
 446:	fd cf       	rjmp	.-6      	; 0x442 <timer0Delay+0x16>
		
		TIFR set_High TOV0;
 448:	88 b7       	in	r24, 0x38	; 56
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	88 bf       	out	0x38, r24	; 56
		
		counter++;
 44e:	2f 5f       	subi	r18, 0xFF	; 255
 450:	3f 4f       	sbci	r19, 0xFF	; 255
	
	timer0_init();
	
	TCCR0 set_High BIT(0);
	
	while(counter < overflow)
 452:	2c 17       	cp	r18, r28
 454:	3d 07       	cpc	r19, r29
 456:	a8 f3       	brcs	.-22     	; 0x442 <timer0Delay+0x16>
		counter++;
	}
	
	counter = 0;
	
	TCCR0 = 0x00;
 458:	13 be       	out	0x33, r1	; 51
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <waitfor0>:

void waitfor0(unsigned int seconds)
{
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	8c 01       	movw	r16, r24
	unsigned int oneSecond = 62500;
	
	for(unsigned int i = 0; i < seconds; i++)
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	d0 e0       	ldi	r29, 0x00	; 0
 46e:	05 c0       	rjmp	.+10     	; 0x47a <waitfor0+0x1a>
	{
		timer0Delay(oneSecond);
 470:	84 e2       	ldi	r24, 0x24	; 36
 472:	94 ef       	ldi	r25, 0xF4	; 244
 474:	0e 94 16 02 	call	0x42c	; 0x42c <timer0Delay>

void waitfor0(unsigned int seconds)
{
	unsigned int oneSecond = 62500;
	
	for(unsigned int i = 0; i < seconds; i++)
 478:	21 96       	adiw	r28, 0x01	; 1
 47a:	c0 17       	cp	r28, r16
 47c:	d1 07       	cpc	r29, r17
 47e:	c0 f3       	brcs	.-16     	; 0x470 <waitfor0+0x10>
	{
		timer0Delay(oneSecond);
	}
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <msWait0>:

void msWait0(unsigned int milliseconds)
{
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	8c 01       	movw	r16, r24
	unsigned int oneMillisecond = 62;
	
	for(unsigned int i = 0; i < milliseconds; i++)
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <msWait0+0x1a>
	{
		timer0Delay(oneMillisecond);
 49a:	8e e3       	ldi	r24, 0x3E	; 62
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 16 02 	call	0x42c	; 0x42c <timer0Delay>

void msWait0(unsigned int milliseconds)
{
	unsigned int oneMillisecond = 62;
	
	for(unsigned int i = 0; i < milliseconds; i++)
 4a2:	21 96       	adiw	r28, 0x01	; 1
 4a4:	c0 17       	cp	r28, r16
 4a6:	d1 07       	cpc	r29, r17
 4a8:	c0 f3       	brcs	.-16     	; 0x49a <msWait0+0x10>
	{
		timer0Delay(oneMillisecond);
	}
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	08 95       	ret

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
